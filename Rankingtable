import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, TrendingUp, TrendingDown } from "lucide-react";
import { motion } from "framer-motion";

export default function RankingTable({ profiles }) {
  const sortedProfiles = [...profiles].sort((a, b) => b.followers - a.followers);

  const getEngagementRate = (profile) => {
    return profile.posts_count > 0 
      ? ((profile.total_views || 0) / profile.posts_count / (profile.followers || 1)) * 100 
      : 0;
  };

  const getRankBadge = (rank) => {
    if (rank === 1) return <Badge className="bg-gradient-to-r from-yellow-400 to-amber-500 text-white border-none">ðŸ‘‘ #1</Badge>;
    if (rank === 2) return <Badge className="bg-gradient-to-r from-gray-300 to-gray-400 text-white border-none">ðŸ¥ˆ #2</Badge>;
    if (rank === 3) return <Badge className="bg-gradient-to-r from-orange-400 to-amber-600 text-white border-none">ðŸ¥‰ #3</Badge>;
    return <Badge variant="outline">#{rank}</Badge>;
  };

  return (
    <Card className="border-none shadow-lg">
      <CardHeader className="bg-gradient-to-r from-purple-50 to-pink-50 border-b">
        <CardTitle className="flex items-center gap-2 text-xl">
          <TrendingUp className="w-5 h-5 text-purple-600" />
          Live Rankings
        </CardTitle>
      </CardHeader>
      <CardContent className="p-0">
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="bg-gray-50">
                <TableHead className="w-20">Rank</TableHead>
                <TableHead>Profile</TableHead>
                <TableHead className="text-right">Followers</TableHead>
                <TableHead className="text-right">Following</TableHead>
                <TableHead className="text-right">Posts</TableHead>
                <TableHead className="text-right">Total Views</TableHead>
                <TableHead className="text-right">Engagement</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedProfiles.map((profile, index) => {
                const rank = index + 1;
                const engagement = getEngagementRate(profile);
                
                return (
                  <motion.tr
                    key={profile.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className={`hover:bg-gray-50 transition-colors ${rank <= 3 ? 'bg-gradient-to-r from-purple-50/30 to-transparent' : ''}`}
                  >
                    <TableCell>
                      {getRankBadge(rank)}
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center text-white font-bold">
                          {profile.profile_name?.[0]?.toUpperCase()}
                        </div>
                        <div>
                          <div className="font-semibold text-gray-900 flex items-center gap-1">
                            {profile.profile_name}
                            {profile.verified && <CheckCircle className="w-4 h-4 text-blue-500" />}
                          </div>
                          <div className="text-sm text-gray-500">@{profile.username}</div>
                        </div>
                      </div>
                    </TableCell>
                    <TableCell className="text-right font-semibold">
                      {(profile.followers / 1000).toFixed(1)}K
                    </TableCell>
                    <TableCell className="text-right">
                      {(profile.following / 1000).toFixed(1)}K
                    </TableCell>
                    <TableCell className="text-right">
                      {profile.posts_count}
                    </TableCell>
                    <TableCell className="text-right">
                      {((profile.total_views || 0) / 1000).toFixed(1)}K
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex items-center justify-end gap-1">
                        {engagement >= 5 ? (
                          <TrendingUp className="w-4 h-4 text-green-500" />
                        ) : (
                          <TrendingDown className="w-4 h-4 text-red-500" />
                        )}
                        <span className={engagement >= 5 ? 'text-green-600 font-semibold' : 'text-red-600'}>
                          {engagement.toFixed(2)}%
                        </span>
                      </div>
                    </TableCell>
                  </motion.tr>
                );
              })}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  );
}