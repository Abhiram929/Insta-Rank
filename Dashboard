import React, { useState, useEffect } from "react";
import { InstagramProfile } from "@/entities/InstagramProfile";
import { motion, AnimatePresence } from "framer-motion";
import { Sparkles } from "lucide-react";

import StatsOverview from "../components/dashboard/StatsOverview";
import ProfileCard from "../components/dashboard/ProfileCard";
import RankingTable from "../components/dashboard/RankingTable";
import FilterControls from "../components/dashboard/FilterControls";

export default function Dashboard() {
  const [profiles, setProfiles] = useState([]);
  const [viewMode, setViewMode] = useState('grid');
  const [sortBy, setSortBy] = useState('followers');
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadProfiles();
    
    // Auto-refresh every 30 seconds
    const interval = setInterval(() => {
      simulateDataUpdate();
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const loadProfiles = async () => {
    setIsLoading(true);
    const data = await InstagramProfile.list();
    setProfiles(data);
    setIsLoading(false);
  };

  const simulateDataUpdate = async () => {
    // Simulate real-time updates by slightly modifying follower counts
    const updatedProfiles = await InstagramProfile.list();
    const profilesWithUpdates = updatedProfiles.map(profile => {
      const change = Math.floor(Math.random() * 200) - 100;
      return {
        ...profile,
        followers: Math.max(1000, profile.followers + change),
        total_views: Math.max(0, (profile.total_views || 0) + Math.floor(Math.random() * 5000))
      };
    });
    
    for (const profile of profilesWithUpdates) {
      await InstagramProfile.update(profile.id, {
        followers: profile.followers,
        total_views: profile.total_views
      });
    }
    
    setProfiles(profilesWithUpdates);
  };

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await simulateDataUpdate();
    setTimeout(() => {
      setIsRefreshing(false);
    }, 1000);
  };

  const getSortedProfiles = () => {
    const sorted = [...profiles];
    switch (sortBy) {
      case 'followers':
        return sorted.sort((a, b) => b.followers - a.followers);
      case 'engagement':
        return sorted.sort((a, b) => {
          const engA = a.posts_count > 0 ? (a.total_views || 0) / a.posts_count / a.followers * 100 : 0;
          const engB = b.posts_count > 0 ? (b.total_views || 0) / b.posts_count / b.followers * 100 : 0;
          return engB - engA;
        });
      case 'posts':
        return sorted.sort((a, b) => b.posts_count - a.posts_count);
      case 'views':
        return sorted.sort((a, b) => (b.total_views || 0) - (a.total_views || 0));
      default:
        return sorted;
    }
  };

  const sortedProfiles = getSortedProfiles();

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-purple-500 border-t-transparent rounded-full animate-spin mx-auto mb-4" />
          <p className="text-gray-600">Loading Instagram Analytics...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
      <div className="max-w-7xl mx-auto p-6 md:p-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="flex items-center gap-3 mb-2">
            <div className="w-12 h-12 bg-gradient-to-br from-purple-500 via-pink-500 to-orange-500 rounded-2xl flex items-center justify-center shadow-lg">
              <Sparkles className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-orange-600 bg-clip-text text-transparent">
                Instagram Analytics Dashboard
              </h1>
              <p className="text-gray-600 mt-1">Real-time rankings and insights</p>
            </div>
          </div>
        </motion.div>

        {/* Stats Overview */}
        <StatsOverview profiles={profiles} />

        {/* Filter Controls */}
        <FilterControls
          viewMode={viewMode}
          setViewMode={setViewMode}
          sortBy={sortBy}
          setSortBy={setSortBy}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
        />

        {/* Content */}
        <AnimatePresence mode="wait">
          {viewMode === 'grid' ? (
            <motion.div
              key="grid"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            >
              {sortedProfiles.map((profile, index) => (
                <ProfileCard 
                  key={profile.id} 
                  profile={profile} 
                  rank={index + 1}
                />
              ))}
            </motion.div>
          ) : (
            <motion.div
              key="table"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <RankingTable profiles={sortedProfiles} />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Auto-refresh indicator */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="mt-8 text-center"
        >
          <p className="text-sm text-gray-500">
            ðŸ”„ Data refreshes automatically every 30 seconds
          </p>
        </motion.div>
      </div>
    </div>
  );
}