import React from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Users, UserPlus, FileText, Eye, CheckCircle } from "lucide-react";
import { motion } from "framer-motion";

export default function ProfileCard({ profile, rank }) {
  const engagementRate = profile.posts_count > 0 
    ? ((profile.total_views || 0) / profile.posts_count / (profile.followers || 1)) * 100 
    : 0;

  const categoryColors = {
    influencer: "bg-purple-100 text-purple-700",
    brand: "bg-blue-100 text-blue-700",
    creator: "bg-pink-100 text-pink-700",
    business: "bg-green-100 text-green-700",
    celebrity: "bg-orange-100 text-orange-700"
  };

  const rankColors = {
    1: "from-yellow-400 to-amber-500",
    2: "from-gray-300 to-gray-400",
    3: "from-orange-400 to-amber-600"
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      whileHover={{ y: -5 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="relative overflow-hidden border-none shadow-lg hover:shadow-2xl transition-all duration-300 bg-white">
        {/* Gradient header */}
        <div className="h-24 bg-gradient-to-r from-purple-500 via-pink-500 to-orange-500 relative">
          {rank <= 3 && (
            <div className={`absolute top-2 right-2 w-10 h-10 rounded-full bg-gradient-to-br ${rankColors[rank]} flex items-center justify-center shadow-lg`}>
              <span className="text-white font-bold text-sm">#{rank}</span>
            </div>
          )}
        </div>

        <CardContent className="pt-0 pb-6 px-6">
          {/* Profile Image */}
          <div className="flex justify-center -mt-12 mb-4">
            <div className="relative">
              <div className="w-24 h-24 rounded-full border-4 border-white shadow-xl overflow-hidden bg-gradient-to-br from-purple-400 to-pink-400">
                {profile.profile_image ? (
                  <img src={profile.profile_image} alt={profile.username} className="w-full h-full object-cover" />
                ) : (
                  <div className="w-full h-full flex items-center justify-center text-white text-3xl font-bold">
                    {profile.profile_name?.[0]?.toUpperCase()}
                  </div>
                )}
              </div>
              {profile.verified && (
                <div className="absolute bottom-0 right-0 bg-blue-500 rounded-full p-1">
                  <CheckCircle className="w-4 h-4 text-white" />
                </div>
              )}
            </div>
          </div>

          {/* Profile Info */}
          <div className="text-center mb-4">
            <h3 className="text-xl font-bold text-gray-900 mb-1">
              {profile.profile_name}
            </h3>
            <p className="text-sm text-gray-500 mb-2">@{profile.username}</p>
            {profile.category && (
              <Badge className={`${categoryColors[profile.category]} border-none`}>
                {profile.category}
              </Badge>
            )}
          </div>

          {/* Bio */}
          {profile.bio && (
            <p className="text-sm text-gray-600 text-center mb-4 line-clamp-2">
              {profile.bio}
            </p>
          )}

          {/* Stats Grid */}
          <div className="grid grid-cols-2 gap-3 mb-4">
            <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-3">
              <div className="flex items-center gap-2 mb-1">
                <Users className="w-4 h-4 text-purple-600" />
                <span className="text-xs text-gray-600">Followers</span>
              </div>
              <div className="text-lg font-bold text-gray-900">
                {(profile.followers / 1000).toFixed(1)}K
              </div>
            </div>

            <div className="bg-gradient-to-br from-pink-50 to-rose-50 rounded-lg p-3">
              <div className="flex items-center gap-2 mb-1">
                <UserPlus className="w-4 h-4 text-pink-600" />
                <span className="text-xs text-gray-600">Following</span>
              </div>
              <div className="text-lg font-bold text-gray-900">
                {(profile.following / 1000).toFixed(1)}K
              </div>
            </div>

            <div className="bg-gradient-to-br from-orange-50 to-amber-50 rounded-lg p-3">
              <div className="flex items-center gap-2 mb-1">
                <FileText className="w-4 h-4 text-orange-600" />
                <span className="text-xs text-gray-600">Posts</span>
              </div>
              <div className="text-lg font-bold text-gray-900">
                {profile.posts_count}
              </div>
            </div>

            <div className="bg-gradient-to-br from-violet-50 to-purple-50 rounded-lg p-3">
              <div className="flex items-center gap-2 mb-1">
                <Eye className="w-4 h-4 text-violet-600" />
                <span className="text-xs text-gray-600">Engagement</span>
              </div>
              <div className="text-lg font-bold text-gray-900">
                {engagementRate.toFixed(1)}%
              </div>
            </div>
          </div>

          {/* Rank Badge */}
          {rank > 3 && (
            <div className="text-center">
              <Badge variant="outline" className="bg-gray-50">
                Rank #{rank}
              </Badge>
            </div>
          )}
        </CardContent>
      </Card>
    </motion.div>
  );
}